import unittest
from parameterized import parameterized

import numpy as np
from modular_splicing.base_perturbations.perturbations import (
    function_on_changed_sequence,
)


class FunctionOnChangedSequence(unittest.TestCase):
    def test_single_perturbation(self):
        x = np.eye(4)[[0, 1, 2, 3, 0]]
        y = function_on_changed_sequence(x, 1, lambda x: x)
        y = np.array(y)
        self.assertTrue((y.sum(-1) == 1).all())
        y = y.argmax(-1)
        print(y.tolist())
        self.assertEqual(
            y.tolist(),
            [
                [[0, 1, 2, 3, 0], [1, 1, 2, 3, 0], [2, 1, 2, 3, 0], [3, 1, 2, 3, 0]],
                [[0, 0, 2, 3, 0], [0, 1, 2, 3, 0], [0, 2, 2, 3, 0], [0, 3, 2, 3, 0]],
                [[0, 1, 0, 3, 0], [0, 1, 1, 3, 0], [0, 1, 2, 3, 0], [0, 1, 3, 3, 0]],
                [[0, 1, 2, 0, 0], [0, 1, 2, 1, 0], [0, 1, 2, 2, 0], [0, 1, 2, 3, 0]],
                [[0, 1, 2, 3, 0], [0, 1, 2, 3, 1], [0, 1, 2, 3, 2], [0, 1, 2, 3, 3]],
            ],
        )

    def test_double_perturbation(self):
        x = np.eye(4)[[0, 1, 2, 3, 0]]
        y = function_on_changed_sequence(x, 2, lambda x: x)
        y = np.array(y)
        self.assertTrue((y.sum(-1) == 1).all())
        y = y.argmax(-1)
        print(y.tolist())
        self.assertEqual(
            y.tolist(),
            [
                [
                    [0, 0, 2, 3, 0],
                    [1, 0, 2, 3, 0],
                    [2, 0, 2, 3, 0],
                    [3, 0, 2, 3, 0],
                    [0, 1, 2, 3, 0],
                    [1, 1, 2, 3, 0],
                    [2, 1, 2, 3, 0],
                    [3, 1, 2, 3, 0],
                    [0, 2, 2, 3, 0],
                    [1, 2, 2, 3, 0],
                    [2, 2, 2, 3, 0],
                    [3, 2, 2, 3, 0],
                    [0, 3, 2, 3, 0],
                    [1, 3, 2, 3, 0],
                    [2, 3, 2, 3, 0],
                    [3, 3, 2, 3, 0],
                ],
                [
                    [0, 0, 0, 3, 0],
                    [0, 1, 0, 3, 0],
                    [0, 2, 0, 3, 0],
                    [0, 3, 0, 3, 0],
                    [0, 0, 1, 3, 0],
                    [0, 1, 1, 3, 0],
                    [0, 2, 1, 3, 0],
                    [0, 3, 1, 3, 0],
                    [0, 0, 2, 3, 0],
                    [0, 1, 2, 3, 0],
                    [0, 2, 2, 3, 0],
                    [0, 3, 2, 3, 0],
                    [0, 0, 3, 3, 0],
                    [0, 1, 3, 3, 0],
                    [0, 2, 3, 3, 0],
                    [0, 3, 3, 3, 0],
                ],
                [
                    [0, 1, 0, 0, 0],
                    [0, 1, 1, 0, 0],
                    [0, 1, 2, 0, 0],
                    [0, 1, 3, 0, 0],
                    [0, 1, 0, 1, 0],
                    [0, 1, 1, 1, 0],
                    [0, 1, 2, 1, 0],
                    [0, 1, 3, 1, 0],
                    [0, 1, 0, 2, 0],
                    [0, 1, 1, 2, 0],
                    [0, 1, 2, 2, 0],
                    [0, 1, 3, 2, 0],
                    [0, 1, 0, 3, 0],
                    [0, 1, 1, 3, 0],
                    [0, 1, 2, 3, 0],
                    [0, 1, 3, 3, 0],
                ],
                [
                    [0, 1, 2, 0, 0],
                    [0, 1, 2, 1, 0],
                    [0, 1, 2, 2, 0],
                    [0, 1, 2, 3, 0],
                    [0, 1, 2, 0, 1],
                    [0, 1, 2, 1, 1],
                    [0, 1, 2, 2, 1],
                    [0, 1, 2, 3, 1],
                    [0, 1, 2, 0, 2],
                    [0, 1, 2, 1, 2],
                    [0, 1, 2, 2, 2],
                    [0, 1, 2, 3, 2],
                    [0, 1, 2, 0, 3],
                    [0, 1, 2, 1, 3],
                    [0, 1, 2, 2, 3],
                    [0, 1, 2, 3, 3],
                ],
            ],
        )
